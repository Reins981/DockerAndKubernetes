services: 
  server:
    build:
      context: .
      dockerfile: dockerfiles/nginx.dockerfile
    ports: 
      - '8000:80'
# Bind mounts only work during development!! Because on other hosts when we deploy the container, the src code is not available, it is
# only available on the host machine. Therefore we need to use copy instructions in a dockerfile.
    volumes: 
      - ./src:/var/www/html
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - php
  php:
    build: 
      context: .
      dockerfile: dockerfiles/php.dockerfile
    volumes: 
      - ./src:/var/www/html:delegated
    depends_on:
      - mysql
  mysql:
    image: mysql:8.4
    env_file:
      - ./env/mysql.env
  # Utility Containers. composer is used to set up our laravel application using a dev environment. So after running the single container
  # with docker-compose run --rm composer create-project --prefer-dist laravel/laravel . , we can start writing laravel code. All the other containers depend on this container.
  # Copmpose, artisan and npm are used to be run locally only. They are not used in production.
  composer:
    build:
      context: ./dockerfiles
      dockerfile: composer.dockerfile
    volumes: 
      - ./src:/var/www/html
  artisan:
    build:
      context: .
      dockerfile: dockerfiles/php.dockerfile
    volumes: 
      - ./src:/var/www/html
    entrypoint: ["php", "/var/www/html/artisan"]
  npm:
    image: node:16
    volumes:
      - ./src:/var/www/html
    working_dir: /var/www/html
    entrypoint: ["npm"]